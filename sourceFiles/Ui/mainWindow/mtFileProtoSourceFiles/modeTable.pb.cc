// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modeTable.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modeTable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace modeTable {

namespace {

const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Link_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTFile_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_modeTable_2eproto() {
  protobuf_AddDesc_modeTable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "modeTable.proto");
  GOOGLE_CHECK(file != NULL);
  Node_descriptor_ = file->message_type(0);
  static const int Node_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, nodename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, textcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, outlinecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, backgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, startaudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, endaudio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, defaultaudio_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      -1);
  Link_descriptor_ = file->message_type(1);
  static const int Link_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, transcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, fromnodename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, tonodename_),
  };
  Link_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Link_descriptor_,
      Link::default_instance_,
      Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _has_bits_[0]),
      -1,
      -1,
      sizeof(Link),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _internal_metadata_),
      -1);
  MTFile_descriptor_ = file->message_type(2);
  static const int MTFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTFile, nodelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTFile, linklist_),
  };
  MTFile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MTFile_descriptor_,
      MTFile::default_instance_,
      MTFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTFile, _has_bits_[0]),
      -1,
      -1,
      sizeof(MTFile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTFile, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_modeTable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Link_descriptor_, &Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MTFile_descriptor_, &MTFile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_modeTable_2eproto() {
  delete Node::default_instance_;
  delete Node_reflection_;
  delete Link::default_instance_;
  delete Link_reflection_;
  delete MTFile::default_instance_;
  delete MTFile_reflection_;
}

void protobuf_AddDesc_modeTable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017modeTable.proto\022\tmodeTable\"\262\001\n\004Node\022\014\n"
    "\004xPos\030\001 \002(\001\022\014\n\004yPos\030\002 \002(\001\022\020\n\010nodeName\030\003 "
    "\002(\t\022\021\n\ttextColor\030\004 \002(\t\022\024\n\014outlineColor\030\005"
    " \002(\t\022\027\n\017backgroundColor\030\006 \002(\t\022\022\n\nstartAu"
    "dio\030\007 \001(\t\022\020\n\010endAudio\030\010 \001(\t\022\024\n\014defaultAu"
    "dio\030\t \003(\t\"C\n\004Link\022\021\n\ttransCode\030\001 \002(\005\022\024\n\014"
    "fromNodeName\030\004 \002(\t\022\022\n\ntoNodeName\030\005 \002(\t\"N"
    "\n\006MTFile\022!\n\010nodeList\030\001 \003(\0132\017.modeTable.N"
    "ode\022!\n\010LinkList\030\002 \003(\0132\017.modeTable.Link", 358);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modeTable.proto", &protobuf_RegisterTypes);
  Node::default_instance_ = new Node();
  Link::default_instance_ = new Link();
  MTFile::default_instance_ = new MTFile();
  Node::default_instance_->InitAsDefaultInstance();
  Link::default_instance_->InitAsDefaultInstance();
  MTFile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_modeTable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_modeTable_2eproto {
  StaticDescriptorInitializer_modeTable_2eproto() {
    protobuf_AddDesc_modeTable_2eproto();
  }
} static_descriptor_initializer_modeTable_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Node::kXPosFieldNumber;
const int Node::kYPosFieldNumber;
const int Node::kNodeNameFieldNumber;
const int Node::kTextColorFieldNumber;
const int Node::kOutlineColorFieldNumber;
const int Node::kBackgroundColorFieldNumber;
const int Node::kStartAudioFieldNumber;
const int Node::kEndAudioFieldNumber;
const int Node::kDefaultAudioFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modeTable.Node)
}

void Node::InitAsDefaultInstance() {
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modeTable.Node)
}

void Node::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  nodename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  textcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outlinecolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backgroundcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startaudio_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endaudio_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:modeTable.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  nodename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  textcolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  outlinecolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backgroundcolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startaudio_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endaudio_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_modeTable_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Node*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(xpos_, ypos_);
    if (has_nodename()) {
      nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_textcolor()) {
      textcolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_outlinecolor()) {
      outlinecolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_backgroundcolor()) {
      backgroundcolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_startaudio()) {
      startaudio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_endaudio()) {
      endaudio_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  defaultaudio_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modeTable.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double xPos = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_yPos;
        break;
      }

      // required double yPos = 2;
      case 2: {
        if (tag == 17) {
         parse_yPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nodeName;
        break;
      }

      // required string nodeName = 3;
      case 3: {
        if (tag == 26) {
         parse_nodeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodename().data(), this->nodename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modeTable.Node.nodeName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_textColor;
        break;
      }

      // required string textColor = 4;
      case 4: {
        if (tag == 34) {
         parse_textColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_textcolor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->textcolor().data(), this->textcolor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modeTable.Node.textColor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_outlineColor;
        break;
      }

      // required string outlineColor = 5;
      case 5: {
        if (tag == 42) {
         parse_outlineColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outlinecolor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->outlinecolor().data(), this->outlinecolor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modeTable.Node.outlineColor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_backgroundColor;
        break;
      }

      // required string backgroundColor = 6;
      case 6: {
        if (tag == 50) {
         parse_backgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backgroundcolor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backgroundcolor().data(), this->backgroundcolor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modeTable.Node.backgroundColor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_startAudio;
        break;
      }

      // optional string startAudio = 7;
      case 7: {
        if (tag == 58) {
         parse_startAudio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startaudio()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->startaudio().data(), this->startaudio().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modeTable.Node.startAudio");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_endAudio;
        break;
      }

      // optional string endAudio = 8;
      case 8: {
        if (tag == 66) {
         parse_endAudio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endaudio()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endaudio().data(), this->endaudio().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modeTable.Node.endAudio");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_defaultAudio;
        break;
      }

      // repeated string defaultAudio = 9;
      case 9: {
        if (tag == 74) {
         parse_defaultAudio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_defaultaudio()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defaultaudio(this->defaultaudio_size() - 1).data(),
            this->defaultaudio(this->defaultaudio_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modeTable.Node.defaultAudio");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_defaultAudio;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modeTable.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modeTable.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modeTable.Node)
  // required double xPos = 1;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xpos(), output);
  }

  // required double yPos = 2;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ypos(), output);
  }

  // required string nodeName = 3;
  if (has_nodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.nodeName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nodename(), output);
  }

  // required string textColor = 4;
  if (has_textcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->textcolor().data(), this->textcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.textColor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->textcolor(), output);
  }

  // required string outlineColor = 5;
  if (has_outlinecolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outlinecolor().data(), this->outlinecolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.outlineColor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->outlinecolor(), output);
  }

  // required string backgroundColor = 6;
  if (has_backgroundcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backgroundcolor().data(), this->backgroundcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.backgroundColor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->backgroundcolor(), output);
  }

  // optional string startAudio = 7;
  if (has_startaudio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startaudio().data(), this->startaudio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.startAudio");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->startaudio(), output);
  }

  // optional string endAudio = 8;
  if (has_endaudio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endaudio().data(), this->endaudio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.endAudio");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->endaudio(), output);
  }

  // repeated string defaultAudio = 9;
  for (int i = 0; i < this->defaultaudio_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->defaultaudio(i).data(), this->defaultaudio(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "modeTable.Node.defaultAudio");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->defaultaudio(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modeTable.Node)
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modeTable.Node)
  // required double xPos = 1;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xpos(), target);
  }

  // required double yPos = 2;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ypos(), target);
  }

  // required string nodeName = 3;
  if (has_nodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.nodeName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nodename(), target);
  }

  // required string textColor = 4;
  if (has_textcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->textcolor().data(), this->textcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.textColor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->textcolor(), target);
  }

  // required string outlineColor = 5;
  if (has_outlinecolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outlinecolor().data(), this->outlinecolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.outlineColor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->outlinecolor(), target);
  }

  // required string backgroundColor = 6;
  if (has_backgroundcolor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backgroundcolor().data(), this->backgroundcolor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.backgroundColor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->backgroundcolor(), target);
  }

  // optional string startAudio = 7;
  if (has_startaudio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->startaudio().data(), this->startaudio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.startAudio");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->startaudio(), target);
  }

  // optional string endAudio = 8;
  if (has_endaudio()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endaudio().data(), this->endaudio().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.endAudio");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->endaudio(), target);
  }

  // repeated string defaultAudio = 9;
  for (int i = 0; i < this->defaultaudio_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defaultaudio(i).data(), this->defaultaudio(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Node.defaultAudio");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->defaultaudio(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modeTable.Node)
  return target;
}

int Node::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_xpos()) {
    // required double xPos = 1;
    total_size += 1 + 8;
  }

  if (has_ypos()) {
    // required double yPos = 2;
    total_size += 1 + 8;
  }

  if (has_nodename()) {
    // required string nodeName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodename());
  }

  if (has_textcolor()) {
    // required string textColor = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->textcolor());
  }

  if (has_outlinecolor()) {
    // required string outlineColor = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->outlinecolor());
  }

  if (has_backgroundcolor()) {
    // required string backgroundColor = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->backgroundcolor());
  }

  return total_size;
}
int Node::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required double xPos = 1;
    total_size += 1 + 8;

    // required double yPos = 2;
    total_size += 1 + 8;

    // required string nodeName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodename());

    // required string textColor = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->textcolor());

    // required string outlineColor = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->outlinecolor());

    // required string backgroundColor = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->backgroundcolor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[6 / 32] & 192) {
    // optional string startAudio = 7;
    if (has_startaudio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startaudio());
    }

    // optional string endAudio = 8;
    if (has_endaudio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endaudio());
    }

  }
  // repeated string defaultAudio = 9;
  total_size += 1 * this->defaultaudio_size();
  for (int i = 0; i < this->defaultaudio_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->defaultaudio(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  defaultaudio_.MergeFrom(from.defaultaudio_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_nodename()) {
      set_has_nodename();
      nodename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodename_);
    }
    if (from.has_textcolor()) {
      set_has_textcolor();
      textcolor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.textcolor_);
    }
    if (from.has_outlinecolor()) {
      set_has_outlinecolor();
      outlinecolor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.outlinecolor_);
    }
    if (from.has_backgroundcolor()) {
      set_has_backgroundcolor();
      backgroundcolor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backgroundcolor_);
    }
    if (from.has_startaudio()) {
      set_has_startaudio();
      startaudio_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.startaudio_);
    }
    if (from.has_endaudio()) {
      set_has_endaudio();
      endaudio_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endaudio_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  std::swap(xpos_, other->xpos_);
  std::swap(ypos_, other->ypos_);
  nodename_.Swap(&other->nodename_);
  textcolor_.Swap(&other->textcolor_);
  outlinecolor_.Swap(&other->outlinecolor_);
  backgroundcolor_.Swap(&other->backgroundcolor_);
  startaudio_.Swap(&other->startaudio_);
  endaudio_.Swap(&other->endaudio_);
  defaultaudio_.UnsafeArenaSwap(&other->defaultaudio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Link::kTransCodeFieldNumber;
const int Link::kFromNodeNameFieldNumber;
const int Link::kToNodeNameFieldNumber;
#endif  // !_MSC_VER

Link::Link()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modeTable.Link)
}

void Link::InitAsDefaultInstance() {
}

Link::Link(const Link& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modeTable.Link)
}

void Link::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  transcode_ = 0;
  fromnodename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:modeTable.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  fromnodename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Link_descriptor_;
}

const Link& Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_modeTable_2eproto();
  return *default_instance_;
}

Link* Link::default_instance_ = NULL;

Link* Link::New(::google::protobuf::Arena* arena) const {
  Link* n = new Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Link::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    transcode_ = 0;
    if (has_fromnodename()) {
      fromnodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tonodename()) {
      tonodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modeTable.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 transCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transcode_)));
          set_has_transcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fromNodeName;
        break;
      }

      // required string fromNodeName = 4;
      case 4: {
        if (tag == 34) {
         parse_fromNodeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromnodename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromnodename().data(), this->fromnodename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modeTable.Link.fromNodeName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_toNodeName;
        break;
      }

      // required string toNodeName = 5;
      case 5: {
        if (tag == 42) {
         parse_toNodeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tonodename().data(), this->tonodename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modeTable.Link.toNodeName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modeTable.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modeTable.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modeTable.Link)
  // required int32 transCode = 1;
  if (has_transcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transcode(), output);
  }

  // required string fromNodeName = 4;
  if (has_fromnodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromnodename().data(), this->fromnodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Link.fromNodeName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fromnodename(), output);
  }

  // required string toNodeName = 5;
  if (has_tonodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tonodename().data(), this->tonodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Link.toNodeName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tonodename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modeTable.Link)
}

::google::protobuf::uint8* Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modeTable.Link)
  // required int32 transCode = 1;
  if (has_transcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->transcode(), target);
  }

  // required string fromNodeName = 4;
  if (has_fromnodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromnodename().data(), this->fromnodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Link.fromNodeName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fromnodename(), target);
  }

  // required string toNodeName = 5;
  if (has_tonodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tonodename().data(), this->tonodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modeTable.Link.toNodeName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tonodename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modeTable.Link)
  return target;
}

int Link::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_transcode()) {
    // required int32 transCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->transcode());
  }

  if (has_fromnodename()) {
    // required string fromNodeName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromnodename());
  }

  if (has_tonodename()) {
    // required string toNodeName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodename());
  }

  return total_size;
}
int Link::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 transCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->transcode());

    // required string fromNodeName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromnodename());

    // required string toNodeName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodename());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Link* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Link*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transcode()) {
      set_transcode(from.transcode());
    }
    if (from.has_fromnodename()) {
      set_has_fromnodename();
      fromnodename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromnodename_);
    }
    if (from.has_tonodename()) {
      set_has_tonodename();
      tonodename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  std::swap(transcode_, other->transcode_);
  fromnodename_.Swap(&other->fromnodename_);
  tonodename_.Swap(&other->tonodename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Link_descriptor_;
  metadata.reflection = Link_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTFile::kNodeListFieldNumber;
const int MTFile::kLinkListFieldNumber;
#endif  // !_MSC_VER

MTFile::MTFile()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modeTable.MTFile)
}

void MTFile::InitAsDefaultInstance() {
}

MTFile::MTFile(const MTFile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modeTable.MTFile)
}

void MTFile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTFile::~MTFile() {
  // @@protoc_insertion_point(destructor:modeTable.MTFile)
  SharedDtor();
}

void MTFile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MTFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTFile_descriptor_;
}

const MTFile& MTFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_modeTable_2eproto();
  return *default_instance_;
}

MTFile* MTFile::default_instance_ = NULL;

MTFile* MTFile::New(::google::protobuf::Arena* arena) const {
  MTFile* n = new MTFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MTFile::Clear() {
  nodelist_.Clear();
  linklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MTFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modeTable.MTFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .modeTable.Node nodeList = 1;
      case 1: {
        if (tag == 10) {
         parse_nodeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_nodeList;
        if (input->ExpectTag(18)) goto parse_LinkList;
        break;
      }

      // repeated .modeTable.Link LinkList = 2;
      case 2: {
        if (tag == 18) {
         parse_LinkList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_linklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LinkList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modeTable.MTFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modeTable.MTFile)
  return false;
#undef DO_
}

void MTFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modeTable.MTFile)
  // repeated .modeTable.Node nodeList = 1;
  for (unsigned int i = 0, n = this->nodelist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodelist(i), output);
  }

  // repeated .modeTable.Link LinkList = 2;
  for (unsigned int i = 0, n = this->linklist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->linklist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modeTable.MTFile)
}

::google::protobuf::uint8* MTFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modeTable.MTFile)
  // repeated .modeTable.Node nodeList = 1;
  for (unsigned int i = 0, n = this->nodelist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodelist(i), target);
  }

  // repeated .modeTable.Link LinkList = 2;
  for (unsigned int i = 0, n = this->linklist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->linklist(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modeTable.MTFile)
  return target;
}

int MTFile::ByteSize() const {
  int total_size = 0;

  // repeated .modeTable.Node nodeList = 1;
  total_size += 1 * this->nodelist_size();
  for (int i = 0; i < this->nodelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodelist(i));
  }

  // repeated .modeTable.Link LinkList = 2;
  total_size += 1 * this->linklist_size();
  for (int i = 0; i < this->linklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->linklist(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTFile::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MTFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTFile::MergeFrom(const MTFile& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nodelist_.MergeFrom(from.nodelist_);
  linklist_.MergeFrom(from.linklist_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MTFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTFile::CopyFrom(const MTFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTFile::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->nodelist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->linklist())) return false;
  return true;
}

void MTFile::Swap(MTFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MTFile::InternalSwap(MTFile* other) {
  nodelist_.UnsafeArenaSwap(&other->nodelist_);
  linklist_.UnsafeArenaSwap(&other->linklist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MTFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTFile_descriptor_;
  metadata.reflection = MTFile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace modeTable

// @@protoc_insertion_point(global_scope)
