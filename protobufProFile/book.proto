syntax="proto2";
package book;

//构建最底层的数据表
message BasicDataTable{
	repeated bytes audioData=1;//用来存储基础的数据数据文件
}

//中间的索引资源映射表
message IndexDataMapTable{
	//在这个表里面的每一对映射值
	message IndexDataMapPair{
		required int32 index =1;//索引值
		required int32 offset =2;//偏移量
	}
	required IndexDataMapPair indexDataMapPair=1;
}

//最顶层的总表 用来码制和索引之间的一个映射
message ModeTable{
	message CodeIndexMapPair{
		required int32 code =1;
		repeated int32 indexList=2;//可能存在多个映射
	}
	repeated CodeIndexMapPair  codeIndexMapPair=1;//多个码制映射节点
}

//独立于数据层存在的上层节点，用于创建故事的逻辑性
message Node{
	required int32 startCode=1;//进入该节点默认播放的语音码
	required int32 endCode=2;//退出该节点默认播放的语音码
	required int32 previous=3;//上一个node节点的标识(这里不是码值)
	repeated int32 next=4;//这里可能存在多个子节点，树状结构，表明状态机的下一个node节点标识
	repeated int32 defaultCode=5;//存在多个默认语音,就是输入的码不是跳转到下一个，也不能跳转到上一个，就采用默认码值
}


//节点树状表
message NodeTree{
	repeated Node treeNode=1;//一棵树里面存在多个节点，各个节点之间的关系需要上层的Qt来建立
}


//一本书里面包含的必须内容
/**
 * 1.一棵节点树...表示各个语音节点之间的关系
 * 2.若干张模式表，以表明在那种模式下面
 * 3.当前模式状态，一本书在一个时刻只可能又一个模式，故将其放在Book message这一层下面
 */
message book{
	required NodeTree nodeTree=1;//节点树
	repeated ModeTable modeTabelList=2;//可能存在多个模式
	enum ModeType{
		GAME = 0;
		STUDY =1;
		STORY =2;
	}
	required ModeType curMode=3 [default=STUDY];//默认为学习模式
}