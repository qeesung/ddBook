// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: book.proto

#ifndef PROTOBUF_book_2eproto__INCLUDED
#define PROTOBUF_book_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ddBook {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_book_2eproto();
void protobuf_AssignDesc_book_2eproto();
void protobuf_ShutdownFile_book_2eproto();

class BasicDataTable;
class IndexDataMapTable;
class IndexDataMapTable_IndexDataMapPair;
class ModeTable;
class ModeTable_CodeIndexMapPair;
class Node;
class NodeTree;
class Book;

enum Book_ModeType {
  Book_ModeType_GAME = 0,
  Book_ModeType_STUDY = 1,
  Book_ModeType_STORY = 2
};
bool Book_ModeType_IsValid(int value);
const Book_ModeType Book_ModeType_ModeType_MIN = Book_ModeType_GAME;
const Book_ModeType Book_ModeType_ModeType_MAX = Book_ModeType_STORY;
const int Book_ModeType_ModeType_ARRAYSIZE = Book_ModeType_ModeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Book_ModeType_descriptor();
inline const ::std::string& Book_ModeType_Name(Book_ModeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Book_ModeType_descriptor(), value);
}
inline bool Book_ModeType_Parse(
    const ::std::string& name, Book_ModeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Book_ModeType>(
    Book_ModeType_descriptor(), name, value);
}
// ===================================================================

class BasicDataTable : public ::google::protobuf::Message {
 public:
  BasicDataTable();
  virtual ~BasicDataTable();

  BasicDataTable(const BasicDataTable& from);

  inline BasicDataTable& operator=(const BasicDataTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicDataTable& default_instance();

  void Swap(BasicDataTable* other);

  // implements Message ----------------------------------------------

  inline BasicDataTable* New() const { return New(NULL); }

  BasicDataTable* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BasicDataTable& from);
  void MergeFrom(const BasicDataTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BasicDataTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes audioData = 1;
  inline int audiodata_size() const;
  inline void clear_audiodata();
  static const int kAudioDataFieldNumber = 1;
  inline const ::std::string& audiodata(int index) const;
  inline ::std::string* mutable_audiodata(int index);
  inline void set_audiodata(int index, const ::std::string& value);
  inline void set_audiodata(int index, const char* value);
  inline void set_audiodata(int index, const void* value, size_t size);
  inline ::std::string* add_audiodata();
  inline void add_audiodata(const ::std::string& value);
  inline void add_audiodata(const char* value);
  inline void add_audiodata(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& audiodata() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_audiodata();

  // @@protoc_insertion_point(class_scope:ddBook.BasicDataTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> audiodata_;
  friend void  protobuf_AddDesc_book_2eproto();
  friend void protobuf_AssignDesc_book_2eproto();
  friend void protobuf_ShutdownFile_book_2eproto();

  void InitAsDefaultInstance();
  static BasicDataTable* default_instance_;
};
// -------------------------------------------------------------------

class IndexDataMapTable_IndexDataMapPair : public ::google::protobuf::Message {
 public:
  IndexDataMapTable_IndexDataMapPair();
  virtual ~IndexDataMapTable_IndexDataMapPair();

  IndexDataMapTable_IndexDataMapPair(const IndexDataMapTable_IndexDataMapPair& from);

  inline IndexDataMapTable_IndexDataMapPair& operator=(const IndexDataMapTable_IndexDataMapPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexDataMapTable_IndexDataMapPair& default_instance();

  void Swap(IndexDataMapTable_IndexDataMapPair* other);

  // implements Message ----------------------------------------------

  inline IndexDataMapTable_IndexDataMapPair* New() const { return New(NULL); }

  IndexDataMapTable_IndexDataMapPair* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexDataMapTable_IndexDataMapPair& from);
  void MergeFrom(const IndexDataMapTable_IndexDataMapPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IndexDataMapTable_IndexDataMapPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required fixed32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ddBook.IndexDataMapTable.IndexDataMapPair)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_offset();
  inline void clear_has_offset();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 offset_;
  friend void  protobuf_AddDesc_book_2eproto();
  friend void protobuf_AssignDesc_book_2eproto();
  friend void protobuf_ShutdownFile_book_2eproto();

  void InitAsDefaultInstance();
  static IndexDataMapTable_IndexDataMapPair* default_instance_;
};
// -------------------------------------------------------------------

class IndexDataMapTable : public ::google::protobuf::Message {
 public:
  IndexDataMapTable();
  virtual ~IndexDataMapTable();

  IndexDataMapTable(const IndexDataMapTable& from);

  inline IndexDataMapTable& operator=(const IndexDataMapTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexDataMapTable& default_instance();

  void Swap(IndexDataMapTable* other);

  // implements Message ----------------------------------------------

  inline IndexDataMapTable* New() const { return New(NULL); }

  IndexDataMapTable* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexDataMapTable& from);
  void MergeFrom(const IndexDataMapTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IndexDataMapTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IndexDataMapTable_IndexDataMapPair IndexDataMapPair;

  // accessors -------------------------------------------------------

  // repeated .ddBook.IndexDataMapTable.IndexDataMapPair indexDataMapPair = 1;
  inline int indexdatamappair_size() const;
  inline void clear_indexdatamappair();
  static const int kIndexDataMapPairFieldNumber = 1;
  inline const ::ddBook::IndexDataMapTable_IndexDataMapPair& indexdatamappair(int index) const;
  inline ::ddBook::IndexDataMapTable_IndexDataMapPair* mutable_indexdatamappair(int index);
  inline ::ddBook::IndexDataMapTable_IndexDataMapPair* add_indexdatamappair();
  inline const ::google::protobuf::RepeatedPtrField< ::ddBook::IndexDataMapTable_IndexDataMapPair >&
      indexdatamappair() const;
  inline ::google::protobuf::RepeatedPtrField< ::ddBook::IndexDataMapTable_IndexDataMapPair >*
      mutable_indexdatamappair();

  // @@protoc_insertion_point(class_scope:ddBook.IndexDataMapTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ddBook::IndexDataMapTable_IndexDataMapPair > indexdatamappair_;
  friend void  protobuf_AddDesc_book_2eproto();
  friend void protobuf_AssignDesc_book_2eproto();
  friend void protobuf_ShutdownFile_book_2eproto();

  void InitAsDefaultInstance();
  static IndexDataMapTable* default_instance_;
};
// -------------------------------------------------------------------

class ModeTable_CodeIndexMapPair : public ::google::protobuf::Message {
 public:
  ModeTable_CodeIndexMapPair();
  virtual ~ModeTable_CodeIndexMapPair();

  ModeTable_CodeIndexMapPair(const ModeTable_CodeIndexMapPair& from);

  inline ModeTable_CodeIndexMapPair& operator=(const ModeTable_CodeIndexMapPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModeTable_CodeIndexMapPair& default_instance();

  void Swap(ModeTable_CodeIndexMapPair* other);

  // implements Message ----------------------------------------------

  inline ModeTable_CodeIndexMapPair* New() const { return New(NULL); }

  ModeTable_CodeIndexMapPair* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModeTable_CodeIndexMapPair& from);
  void MergeFrom(const ModeTable_CodeIndexMapPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModeTable_CodeIndexMapPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);

  // repeated fixed32 indexList = 2;
  inline int indexlist_size() const;
  inline void clear_indexlist();
  static const int kIndexListFieldNumber = 2;
  inline ::google::protobuf::uint32 indexlist(int index) const;
  inline void set_indexlist(int index, ::google::protobuf::uint32 value);
  inline void add_indexlist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      indexlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_indexlist();

  // @@protoc_insertion_point(class_scope:ddBook.ModeTable.CodeIndexMapPair)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > indexlist_;
  ::google::protobuf::uint32 code_;
  friend void  protobuf_AddDesc_book_2eproto();
  friend void protobuf_AssignDesc_book_2eproto();
  friend void protobuf_ShutdownFile_book_2eproto();

  void InitAsDefaultInstance();
  static ModeTable_CodeIndexMapPair* default_instance_;
};
// -------------------------------------------------------------------

class ModeTable : public ::google::protobuf::Message {
 public:
  ModeTable();
  virtual ~ModeTable();

  ModeTable(const ModeTable& from);

  inline ModeTable& operator=(const ModeTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModeTable& default_instance();

  void Swap(ModeTable* other);

  // implements Message ----------------------------------------------

  inline ModeTable* New() const { return New(NULL); }

  ModeTable* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModeTable& from);
  void MergeFrom(const ModeTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModeTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModeTable_CodeIndexMapPair CodeIndexMapPair;

  // accessors -------------------------------------------------------

  // repeated .ddBook.ModeTable.CodeIndexMapPair codeIndexMapPair = 1;
  inline int codeindexmappair_size() const;
  inline void clear_codeindexmappair();
  static const int kCodeIndexMapPairFieldNumber = 1;
  inline const ::ddBook::ModeTable_CodeIndexMapPair& codeindexmappair(int index) const;
  inline ::ddBook::ModeTable_CodeIndexMapPair* mutable_codeindexmappair(int index);
  inline ::ddBook::ModeTable_CodeIndexMapPair* add_codeindexmappair();
  inline const ::google::protobuf::RepeatedPtrField< ::ddBook::ModeTable_CodeIndexMapPair >&
      codeindexmappair() const;
  inline ::google::protobuf::RepeatedPtrField< ::ddBook::ModeTable_CodeIndexMapPair >*
      mutable_codeindexmappair();

  // @@protoc_insertion_point(class_scope:ddBook.ModeTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ddBook::ModeTable_CodeIndexMapPair > codeindexmappair_;
  friend void  protobuf_AddDesc_book_2eproto();
  friend void protobuf_AssignDesc_book_2eproto();
  friend void protobuf_ShutdownFile_book_2eproto();

  void InitAsDefaultInstance();
  static ModeTable* default_instance_;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  inline Node* New() const { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 startCode = 1;
  inline bool has_startcode() const;
  inline void clear_startcode();
  static const int kStartCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 startcode() const;
  inline void set_startcode(::google::protobuf::uint32 value);

  // required fixed32 endCode = 2;
  inline bool has_endcode() const;
  inline void clear_endcode();
  static const int kEndCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 endcode() const;
  inline void set_endcode(::google::protobuf::uint32 value);

  // required fixed32 previous = 3;
  inline bool has_previous() const;
  inline void clear_previous();
  static const int kPreviousFieldNumber = 3;
  inline ::google::protobuf::uint32 previous() const;
  inline void set_previous(::google::protobuf::uint32 value);

  // repeated fixed32 next = 4;
  inline int next_size() const;
  inline void clear_next();
  static const int kNextFieldNumber = 4;
  inline ::google::protobuf::uint32 next(int index) const;
  inline void set_next(int index, ::google::protobuf::uint32 value);
  inline void add_next(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      next() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_next();

  // repeated fixed32 defaultCode = 5;
  inline int defaultcode_size() const;
  inline void clear_defaultcode();
  static const int kDefaultCodeFieldNumber = 5;
  inline ::google::protobuf::uint32 defaultcode(int index) const;
  inline void set_defaultcode(int index, ::google::protobuf::uint32 value);
  inline void add_defaultcode(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      defaultcode() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_defaultcode();

  // @@protoc_insertion_point(class_scope:ddBook.Node)
 private:
  inline void set_has_startcode();
  inline void clear_has_startcode();
  inline void set_has_endcode();
  inline void clear_has_endcode();
  inline void set_has_previous();
  inline void clear_has_previous();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 startcode_;
  ::google::protobuf::uint32 endcode_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > next_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > defaultcode_;
  ::google::protobuf::uint32 previous_;
  friend void  protobuf_AddDesc_book_2eproto();
  friend void protobuf_AssignDesc_book_2eproto();
  friend void protobuf_ShutdownFile_book_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class NodeTree : public ::google::protobuf::Message {
 public:
  NodeTree();
  virtual ~NodeTree();

  NodeTree(const NodeTree& from);

  inline NodeTree& operator=(const NodeTree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeTree& default_instance();

  void Swap(NodeTree* other);

  // implements Message ----------------------------------------------

  inline NodeTree* New() const { return New(NULL); }

  NodeTree* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeTree& from);
  void MergeFrom(const NodeTree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeTree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ddBook.Node treeNode = 1;
  inline int treenode_size() const;
  inline void clear_treenode();
  static const int kTreeNodeFieldNumber = 1;
  inline const ::ddBook::Node& treenode(int index) const;
  inline ::ddBook::Node* mutable_treenode(int index);
  inline ::ddBook::Node* add_treenode();
  inline const ::google::protobuf::RepeatedPtrField< ::ddBook::Node >&
      treenode() const;
  inline ::google::protobuf::RepeatedPtrField< ::ddBook::Node >*
      mutable_treenode();

  // @@protoc_insertion_point(class_scope:ddBook.NodeTree)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ddBook::Node > treenode_;
  friend void  protobuf_AddDesc_book_2eproto();
  friend void protobuf_AssignDesc_book_2eproto();
  friend void protobuf_ShutdownFile_book_2eproto();

  void InitAsDefaultInstance();
  static NodeTree* default_instance_;
};
// -------------------------------------------------------------------

class Book : public ::google::protobuf::Message {
 public:
  Book();
  virtual ~Book();

  Book(const Book& from);

  inline Book& operator=(const Book& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Book& default_instance();

  void Swap(Book* other);

  // implements Message ----------------------------------------------

  inline Book* New() const { return New(NULL); }

  Book* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Book& from);
  void MergeFrom(const Book& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Book* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Book_ModeType ModeType;
  static const ModeType GAME = Book_ModeType_GAME;
  static const ModeType STUDY = Book_ModeType_STUDY;
  static const ModeType STORY = Book_ModeType_STORY;
  static inline bool ModeType_IsValid(int value) {
    return Book_ModeType_IsValid(value);
  }
  static const ModeType ModeType_MIN =
    Book_ModeType_ModeType_MIN;
  static const ModeType ModeType_MAX =
    Book_ModeType_ModeType_MAX;
  static const int ModeType_ARRAYSIZE =
    Book_ModeType_ModeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ModeType_descriptor() {
    return Book_ModeType_descriptor();
  }
  static inline const ::std::string& ModeType_Name(ModeType value) {
    return Book_ModeType_Name(value);
  }
  static inline bool ModeType_Parse(const ::std::string& name,
      ModeType* value) {
    return Book_ModeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ddBook.NodeTree nodeTree = 1;
  inline bool has_nodetree() const;
  inline void clear_nodetree();
  static const int kNodeTreeFieldNumber = 1;
  inline const ::ddBook::NodeTree& nodetree() const;
  inline ::ddBook::NodeTree* mutable_nodetree();
  inline ::ddBook::NodeTree* release_nodetree();
  inline void set_allocated_nodetree(::ddBook::NodeTree* nodetree);

  // repeated .ddBook.ModeTable modeTabelList = 2;
  inline int modetabellist_size() const;
  inline void clear_modetabellist();
  static const int kModeTabelListFieldNumber = 2;
  inline const ::ddBook::ModeTable& modetabellist(int index) const;
  inline ::ddBook::ModeTable* mutable_modetabellist(int index);
  inline ::ddBook::ModeTable* add_modetabellist();
  inline const ::google::protobuf::RepeatedPtrField< ::ddBook::ModeTable >&
      modetabellist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ddBook::ModeTable >*
      mutable_modetabellist();

  // required .ddBook.Book.ModeType curMode = 3 [default = STUDY];
  inline bool has_curmode() const;
  inline void clear_curmode();
  static const int kCurModeFieldNumber = 3;
  inline ::ddBook::Book_ModeType curmode() const;
  inline void set_curmode(::ddBook::Book_ModeType value);

  // required .ddBook.BasicDataTable basicDataTale = 4;
  inline bool has_basicdatatale() const;
  inline void clear_basicdatatale();
  static const int kBasicDataTaleFieldNumber = 4;
  inline const ::ddBook::BasicDataTable& basicdatatale() const;
  inline ::ddBook::BasicDataTable* mutable_basicdatatale();
  inline ::ddBook::BasicDataTable* release_basicdatatale();
  inline void set_allocated_basicdatatale(::ddBook::BasicDataTable* basicdatatale);

  // required .ddBook.IndexDataMapTable indexDataMapTable = 5;
  inline bool has_indexdatamaptable() const;
  inline void clear_indexdatamaptable();
  static const int kIndexDataMapTableFieldNumber = 5;
  inline const ::ddBook::IndexDataMapTable& indexdatamaptable() const;
  inline ::ddBook::IndexDataMapTable* mutable_indexdatamaptable();
  inline ::ddBook::IndexDataMapTable* release_indexdatamaptable();
  inline void set_allocated_indexdatamaptable(::ddBook::IndexDataMapTable* indexdatamaptable);

  // @@protoc_insertion_point(class_scope:ddBook.Book)
 private:
  inline void set_has_nodetree();
  inline void clear_has_nodetree();
  inline void set_has_curmode();
  inline void clear_has_curmode();
  inline void set_has_basicdatatale();
  inline void clear_has_basicdatatale();
  inline void set_has_indexdatamaptable();
  inline void clear_has_indexdatamaptable();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ddBook::NodeTree* nodetree_;
  ::google::protobuf::RepeatedPtrField< ::ddBook::ModeTable > modetabellist_;
  ::ddBook::BasicDataTable* basicdatatale_;
  ::ddBook::IndexDataMapTable* indexdatamaptable_;
  int curmode_;
  friend void  protobuf_AddDesc_book_2eproto();
  friend void protobuf_AssignDesc_book_2eproto();
  friend void protobuf_ShutdownFile_book_2eproto();

  void InitAsDefaultInstance();
  static Book* default_instance_;
};
// ===================================================================


// ===================================================================

// BasicDataTable

// repeated bytes audioData = 1;
inline int BasicDataTable::audiodata_size() const {
  return audiodata_.size();
}
inline void BasicDataTable::clear_audiodata() {
  audiodata_.Clear();
}
inline const ::std::string& BasicDataTable::audiodata(int index) const {
  // @@protoc_insertion_point(field_get:ddBook.BasicDataTable.audioData)
  return audiodata_.Get(index);
}
inline ::std::string* BasicDataTable::mutable_audiodata(int index) {
  // @@protoc_insertion_point(field_mutable:ddBook.BasicDataTable.audioData)
  return audiodata_.Mutable(index);
}
inline void BasicDataTable::set_audiodata(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ddBook.BasicDataTable.audioData)
  audiodata_.Mutable(index)->assign(value);
}
inline void BasicDataTable::set_audiodata(int index, const char* value) {
  audiodata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ddBook.BasicDataTable.audioData)
}
inline void BasicDataTable::set_audiodata(int index, const void* value, size_t size) {
  audiodata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ddBook.BasicDataTable.audioData)
}
inline ::std::string* BasicDataTable::add_audiodata() {
  return audiodata_.Add();
}
inline void BasicDataTable::add_audiodata(const ::std::string& value) {
  audiodata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ddBook.BasicDataTable.audioData)
}
inline void BasicDataTable::add_audiodata(const char* value) {
  audiodata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ddBook.BasicDataTable.audioData)
}
inline void BasicDataTable::add_audiodata(const void* value, size_t size) {
  audiodata_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ddBook.BasicDataTable.audioData)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BasicDataTable::audiodata() const {
  // @@protoc_insertion_point(field_list:ddBook.BasicDataTable.audioData)
  return audiodata_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BasicDataTable::mutable_audiodata() {
  // @@protoc_insertion_point(field_mutable_list:ddBook.BasicDataTable.audioData)
  return &audiodata_;
}

// -------------------------------------------------------------------

// IndexDataMapTable_IndexDataMapPair

// required fixed32 index = 1;
inline bool IndexDataMapTable_IndexDataMapPair::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexDataMapTable_IndexDataMapPair::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexDataMapTable_IndexDataMapPair::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexDataMapTable_IndexDataMapPair::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 IndexDataMapTable_IndexDataMapPair::index() const {
  // @@protoc_insertion_point(field_get:ddBook.IndexDataMapTable.IndexDataMapPair.index)
  return index_;
}
inline void IndexDataMapTable_IndexDataMapPair::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:ddBook.IndexDataMapTable.IndexDataMapPair.index)
}

// required fixed32 offset = 2;
inline bool IndexDataMapTable_IndexDataMapPair::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexDataMapTable_IndexDataMapPair::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexDataMapTable_IndexDataMapPair::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexDataMapTable_IndexDataMapPair::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 IndexDataMapTable_IndexDataMapPair::offset() const {
  // @@protoc_insertion_point(field_get:ddBook.IndexDataMapTable.IndexDataMapPair.offset)
  return offset_;
}
inline void IndexDataMapTable_IndexDataMapPair::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ddBook.IndexDataMapTable.IndexDataMapPair.offset)
}

// -------------------------------------------------------------------

// IndexDataMapTable

// repeated .ddBook.IndexDataMapTable.IndexDataMapPair indexDataMapPair = 1;
inline int IndexDataMapTable::indexdatamappair_size() const {
  return indexdatamappair_.size();
}
inline void IndexDataMapTable::clear_indexdatamappair() {
  indexdatamappair_.Clear();
}
inline const ::ddBook::IndexDataMapTable_IndexDataMapPair& IndexDataMapTable::indexdatamappair(int index) const {
  // @@protoc_insertion_point(field_get:ddBook.IndexDataMapTable.indexDataMapPair)
  return indexdatamappair_.Get(index);
}
inline ::ddBook::IndexDataMapTable_IndexDataMapPair* IndexDataMapTable::mutable_indexdatamappair(int index) {
  // @@protoc_insertion_point(field_mutable:ddBook.IndexDataMapTable.indexDataMapPair)
  return indexdatamappair_.Mutable(index);
}
inline ::ddBook::IndexDataMapTable_IndexDataMapPair* IndexDataMapTable::add_indexdatamappair() {
  // @@protoc_insertion_point(field_add:ddBook.IndexDataMapTable.indexDataMapPair)
  return indexdatamappair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ddBook::IndexDataMapTable_IndexDataMapPair >&
IndexDataMapTable::indexdatamappair() const {
  // @@protoc_insertion_point(field_list:ddBook.IndexDataMapTable.indexDataMapPair)
  return indexdatamappair_;
}
inline ::google::protobuf::RepeatedPtrField< ::ddBook::IndexDataMapTable_IndexDataMapPair >*
IndexDataMapTable::mutable_indexdatamappair() {
  // @@protoc_insertion_point(field_mutable_list:ddBook.IndexDataMapTable.indexDataMapPair)
  return &indexdatamappair_;
}

// -------------------------------------------------------------------

// ModeTable_CodeIndexMapPair

// required fixed32 code = 1;
inline bool ModeTable_CodeIndexMapPair::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModeTable_CodeIndexMapPair::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModeTable_CodeIndexMapPair::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModeTable_CodeIndexMapPair::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google::protobuf::uint32 ModeTable_CodeIndexMapPair::code() const {
  // @@protoc_insertion_point(field_get:ddBook.ModeTable.CodeIndexMapPair.code)
  return code_;
}
inline void ModeTable_CodeIndexMapPair::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:ddBook.ModeTable.CodeIndexMapPair.code)
}

// repeated fixed32 indexList = 2;
inline int ModeTable_CodeIndexMapPair::indexlist_size() const {
  return indexlist_.size();
}
inline void ModeTable_CodeIndexMapPair::clear_indexlist() {
  indexlist_.Clear();
}
inline ::google::protobuf::uint32 ModeTable_CodeIndexMapPair::indexlist(int index) const {
  // @@protoc_insertion_point(field_get:ddBook.ModeTable.CodeIndexMapPair.indexList)
  return indexlist_.Get(index);
}
inline void ModeTable_CodeIndexMapPair::set_indexlist(int index, ::google::protobuf::uint32 value) {
  indexlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:ddBook.ModeTable.CodeIndexMapPair.indexList)
}
inline void ModeTable_CodeIndexMapPair::add_indexlist(::google::protobuf::uint32 value) {
  indexlist_.Add(value);
  // @@protoc_insertion_point(field_add:ddBook.ModeTable.CodeIndexMapPair.indexList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ModeTable_CodeIndexMapPair::indexlist() const {
  // @@protoc_insertion_point(field_list:ddBook.ModeTable.CodeIndexMapPair.indexList)
  return indexlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ModeTable_CodeIndexMapPair::mutable_indexlist() {
  // @@protoc_insertion_point(field_mutable_list:ddBook.ModeTable.CodeIndexMapPair.indexList)
  return &indexlist_;
}

// -------------------------------------------------------------------

// ModeTable

// repeated .ddBook.ModeTable.CodeIndexMapPair codeIndexMapPair = 1;
inline int ModeTable::codeindexmappair_size() const {
  return codeindexmappair_.size();
}
inline void ModeTable::clear_codeindexmappair() {
  codeindexmappair_.Clear();
}
inline const ::ddBook::ModeTable_CodeIndexMapPair& ModeTable::codeindexmappair(int index) const {
  // @@protoc_insertion_point(field_get:ddBook.ModeTable.codeIndexMapPair)
  return codeindexmappair_.Get(index);
}
inline ::ddBook::ModeTable_CodeIndexMapPair* ModeTable::mutable_codeindexmappair(int index) {
  // @@protoc_insertion_point(field_mutable:ddBook.ModeTable.codeIndexMapPair)
  return codeindexmappair_.Mutable(index);
}
inline ::ddBook::ModeTable_CodeIndexMapPair* ModeTable::add_codeindexmappair() {
  // @@protoc_insertion_point(field_add:ddBook.ModeTable.codeIndexMapPair)
  return codeindexmappair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ddBook::ModeTable_CodeIndexMapPair >&
ModeTable::codeindexmappair() const {
  // @@protoc_insertion_point(field_list:ddBook.ModeTable.codeIndexMapPair)
  return codeindexmappair_;
}
inline ::google::protobuf::RepeatedPtrField< ::ddBook::ModeTable_CodeIndexMapPair >*
ModeTable::mutable_codeindexmappair() {
  // @@protoc_insertion_point(field_mutable_list:ddBook.ModeTable.codeIndexMapPair)
  return &codeindexmappair_;
}

// -------------------------------------------------------------------

// Node

// required fixed32 startCode = 1;
inline bool Node::has_startcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_startcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_startcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_startcode() {
  startcode_ = 0u;
  clear_has_startcode();
}
inline ::google::protobuf::uint32 Node::startcode() const {
  // @@protoc_insertion_point(field_get:ddBook.Node.startCode)
  return startcode_;
}
inline void Node::set_startcode(::google::protobuf::uint32 value) {
  set_has_startcode();
  startcode_ = value;
  // @@protoc_insertion_point(field_set:ddBook.Node.startCode)
}

// required fixed32 endCode = 2;
inline bool Node::has_endcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_endcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_endcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_endcode() {
  endcode_ = 0u;
  clear_has_endcode();
}
inline ::google::protobuf::uint32 Node::endcode() const {
  // @@protoc_insertion_point(field_get:ddBook.Node.endCode)
  return endcode_;
}
inline void Node::set_endcode(::google::protobuf::uint32 value) {
  set_has_endcode();
  endcode_ = value;
  // @@protoc_insertion_point(field_set:ddBook.Node.endCode)
}

// required fixed32 previous = 3;
inline bool Node::has_previous() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_previous() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_previous() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_previous() {
  previous_ = 0u;
  clear_has_previous();
}
inline ::google::protobuf::uint32 Node::previous() const {
  // @@protoc_insertion_point(field_get:ddBook.Node.previous)
  return previous_;
}
inline void Node::set_previous(::google::protobuf::uint32 value) {
  set_has_previous();
  previous_ = value;
  // @@protoc_insertion_point(field_set:ddBook.Node.previous)
}

// repeated fixed32 next = 4;
inline int Node::next_size() const {
  return next_.size();
}
inline void Node::clear_next() {
  next_.Clear();
}
inline ::google::protobuf::uint32 Node::next(int index) const {
  // @@protoc_insertion_point(field_get:ddBook.Node.next)
  return next_.Get(index);
}
inline void Node::set_next(int index, ::google::protobuf::uint32 value) {
  next_.Set(index, value);
  // @@protoc_insertion_point(field_set:ddBook.Node.next)
}
inline void Node::add_next(::google::protobuf::uint32 value) {
  next_.Add(value);
  // @@protoc_insertion_point(field_add:ddBook.Node.next)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Node::next() const {
  // @@protoc_insertion_point(field_list:ddBook.Node.next)
  return next_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Node::mutable_next() {
  // @@protoc_insertion_point(field_mutable_list:ddBook.Node.next)
  return &next_;
}

// repeated fixed32 defaultCode = 5;
inline int Node::defaultcode_size() const {
  return defaultcode_.size();
}
inline void Node::clear_defaultcode() {
  defaultcode_.Clear();
}
inline ::google::protobuf::uint32 Node::defaultcode(int index) const {
  // @@protoc_insertion_point(field_get:ddBook.Node.defaultCode)
  return defaultcode_.Get(index);
}
inline void Node::set_defaultcode(int index, ::google::protobuf::uint32 value) {
  defaultcode_.Set(index, value);
  // @@protoc_insertion_point(field_set:ddBook.Node.defaultCode)
}
inline void Node::add_defaultcode(::google::protobuf::uint32 value) {
  defaultcode_.Add(value);
  // @@protoc_insertion_point(field_add:ddBook.Node.defaultCode)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Node::defaultcode() const {
  // @@protoc_insertion_point(field_list:ddBook.Node.defaultCode)
  return defaultcode_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Node::mutable_defaultcode() {
  // @@protoc_insertion_point(field_mutable_list:ddBook.Node.defaultCode)
  return &defaultcode_;
}

// -------------------------------------------------------------------

// NodeTree

// repeated .ddBook.Node treeNode = 1;
inline int NodeTree::treenode_size() const {
  return treenode_.size();
}
inline void NodeTree::clear_treenode() {
  treenode_.Clear();
}
inline const ::ddBook::Node& NodeTree::treenode(int index) const {
  // @@protoc_insertion_point(field_get:ddBook.NodeTree.treeNode)
  return treenode_.Get(index);
}
inline ::ddBook::Node* NodeTree::mutable_treenode(int index) {
  // @@protoc_insertion_point(field_mutable:ddBook.NodeTree.treeNode)
  return treenode_.Mutable(index);
}
inline ::ddBook::Node* NodeTree::add_treenode() {
  // @@protoc_insertion_point(field_add:ddBook.NodeTree.treeNode)
  return treenode_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ddBook::Node >&
NodeTree::treenode() const {
  // @@protoc_insertion_point(field_list:ddBook.NodeTree.treeNode)
  return treenode_;
}
inline ::google::protobuf::RepeatedPtrField< ::ddBook::Node >*
NodeTree::mutable_treenode() {
  // @@protoc_insertion_point(field_mutable_list:ddBook.NodeTree.treeNode)
  return &treenode_;
}

// -------------------------------------------------------------------

// Book

// required .ddBook.NodeTree nodeTree = 1;
inline bool Book::has_nodetree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Book::set_has_nodetree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Book::clear_has_nodetree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Book::clear_nodetree() {
  if (nodetree_ != NULL) nodetree_->::ddBook::NodeTree::Clear();
  clear_has_nodetree();
}
inline const ::ddBook::NodeTree& Book::nodetree() const {
  // @@protoc_insertion_point(field_get:ddBook.Book.nodeTree)
  return nodetree_ != NULL ? *nodetree_ : *default_instance_->nodetree_;
}
inline ::ddBook::NodeTree* Book::mutable_nodetree() {
  set_has_nodetree();
  if (nodetree_ == NULL) {
    nodetree_ = new ::ddBook::NodeTree;
  }
  // @@protoc_insertion_point(field_mutable:ddBook.Book.nodeTree)
  return nodetree_;
}
inline ::ddBook::NodeTree* Book::release_nodetree() {
  clear_has_nodetree();
  ::ddBook::NodeTree* temp = nodetree_;
  nodetree_ = NULL;
  return temp;
}
inline void Book::set_allocated_nodetree(::ddBook::NodeTree* nodetree) {
  delete nodetree_;
  nodetree_ = nodetree;
  if (nodetree) {
    set_has_nodetree();
  } else {
    clear_has_nodetree();
  }
  // @@protoc_insertion_point(field_set_allocated:ddBook.Book.nodeTree)
}

// repeated .ddBook.ModeTable modeTabelList = 2;
inline int Book::modetabellist_size() const {
  return modetabellist_.size();
}
inline void Book::clear_modetabellist() {
  modetabellist_.Clear();
}
inline const ::ddBook::ModeTable& Book::modetabellist(int index) const {
  // @@protoc_insertion_point(field_get:ddBook.Book.modeTabelList)
  return modetabellist_.Get(index);
}
inline ::ddBook::ModeTable* Book::mutable_modetabellist(int index) {
  // @@protoc_insertion_point(field_mutable:ddBook.Book.modeTabelList)
  return modetabellist_.Mutable(index);
}
inline ::ddBook::ModeTable* Book::add_modetabellist() {
  // @@protoc_insertion_point(field_add:ddBook.Book.modeTabelList)
  return modetabellist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ddBook::ModeTable >&
Book::modetabellist() const {
  // @@protoc_insertion_point(field_list:ddBook.Book.modeTabelList)
  return modetabellist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ddBook::ModeTable >*
Book::mutable_modetabellist() {
  // @@protoc_insertion_point(field_mutable_list:ddBook.Book.modeTabelList)
  return &modetabellist_;
}

// required .ddBook.Book.ModeType curMode = 3 [default = STUDY];
inline bool Book::has_curmode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Book::set_has_curmode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Book::clear_has_curmode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Book::clear_curmode() {
  curmode_ = 1;
  clear_has_curmode();
}
inline ::ddBook::Book_ModeType Book::curmode() const {
  // @@protoc_insertion_point(field_get:ddBook.Book.curMode)
  return static_cast< ::ddBook::Book_ModeType >(curmode_);
}
inline void Book::set_curmode(::ddBook::Book_ModeType value) {
  assert(::ddBook::Book_ModeType_IsValid(value));
  set_has_curmode();
  curmode_ = value;
  // @@protoc_insertion_point(field_set:ddBook.Book.curMode)
}

// required .ddBook.BasicDataTable basicDataTale = 4;
inline bool Book::has_basicdatatale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Book::set_has_basicdatatale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Book::clear_has_basicdatatale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Book::clear_basicdatatale() {
  if (basicdatatale_ != NULL) basicdatatale_->::ddBook::BasicDataTable::Clear();
  clear_has_basicdatatale();
}
inline const ::ddBook::BasicDataTable& Book::basicdatatale() const {
  // @@protoc_insertion_point(field_get:ddBook.Book.basicDataTale)
  return basicdatatale_ != NULL ? *basicdatatale_ : *default_instance_->basicdatatale_;
}
inline ::ddBook::BasicDataTable* Book::mutable_basicdatatale() {
  set_has_basicdatatale();
  if (basicdatatale_ == NULL) {
    basicdatatale_ = new ::ddBook::BasicDataTable;
  }
  // @@protoc_insertion_point(field_mutable:ddBook.Book.basicDataTale)
  return basicdatatale_;
}
inline ::ddBook::BasicDataTable* Book::release_basicdatatale() {
  clear_has_basicdatatale();
  ::ddBook::BasicDataTable* temp = basicdatatale_;
  basicdatatale_ = NULL;
  return temp;
}
inline void Book::set_allocated_basicdatatale(::ddBook::BasicDataTable* basicdatatale) {
  delete basicdatatale_;
  basicdatatale_ = basicdatatale;
  if (basicdatatale) {
    set_has_basicdatatale();
  } else {
    clear_has_basicdatatale();
  }
  // @@protoc_insertion_point(field_set_allocated:ddBook.Book.basicDataTale)
}

// required .ddBook.IndexDataMapTable indexDataMapTable = 5;
inline bool Book::has_indexdatamaptable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Book::set_has_indexdatamaptable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Book::clear_has_indexdatamaptable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Book::clear_indexdatamaptable() {
  if (indexdatamaptable_ != NULL) indexdatamaptable_->::ddBook::IndexDataMapTable::Clear();
  clear_has_indexdatamaptable();
}
inline const ::ddBook::IndexDataMapTable& Book::indexdatamaptable() const {
  // @@protoc_insertion_point(field_get:ddBook.Book.indexDataMapTable)
  return indexdatamaptable_ != NULL ? *indexdatamaptable_ : *default_instance_->indexdatamaptable_;
}
inline ::ddBook::IndexDataMapTable* Book::mutable_indexdatamaptable() {
  set_has_indexdatamaptable();
  if (indexdatamaptable_ == NULL) {
    indexdatamaptable_ = new ::ddBook::IndexDataMapTable;
  }
  // @@protoc_insertion_point(field_mutable:ddBook.Book.indexDataMapTable)
  return indexdatamaptable_;
}
inline ::ddBook::IndexDataMapTable* Book::release_indexdatamaptable() {
  clear_has_indexdatamaptable();
  ::ddBook::IndexDataMapTable* temp = indexdatamaptable_;
  indexdatamaptable_ = NULL;
  return temp;
}
inline void Book::set_allocated_indexdatamaptable(::ddBook::IndexDataMapTable* indexdatamaptable) {
  delete indexdatamaptable_;
  indexdatamaptable_ = indexdatamaptable;
  if (indexdatamaptable) {
    set_has_indexdatamaptable();
  } else {
    clear_has_indexdatamaptable();
  }
  // @@protoc_insertion_point(field_set_allocated:ddBook.Book.indexDataMapTable)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ddBook

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ddBook::Book_ModeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ddBook::Book_ModeType>() {
  return ::ddBook::Book_ModeType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_book_2eproto__INCLUDED
