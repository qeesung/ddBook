// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: book.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "book.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace book {

namespace {

const ::google::protobuf::Descriptor* BasicDataTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicDataTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexDataMapTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexDataMapTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexDataMapTable_IndexDataMapPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexDataMapTable_IndexDataMapPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModeTable_CodeIndexMapPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModeTable_CodeIndexMapPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* book_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  book_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* book_ModeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_book_2eproto() {
  protobuf_AddDesc_book_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "book.proto");
  GOOGLE_CHECK(file != NULL);
  BasicDataTable_descriptor_ = file->message_type(0);
  static const int BasicDataTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDataTable, audiodata_),
  };
  BasicDataTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BasicDataTable_descriptor_,
      BasicDataTable::default_instance_,
      BasicDataTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDataTable, _has_bits_[0]),
      -1,
      -1,
      sizeof(BasicDataTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDataTable, _internal_metadata_),
      -1);
  IndexDataMapTable_descriptor_ = file->message_type(1);
  static const int IndexDataMapTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexDataMapTable, indexdatamappair_),
  };
  IndexDataMapTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IndexDataMapTable_descriptor_,
      IndexDataMapTable::default_instance_,
      IndexDataMapTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexDataMapTable, _has_bits_[0]),
      -1,
      -1,
      sizeof(IndexDataMapTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexDataMapTable, _internal_metadata_),
      -1);
  IndexDataMapTable_IndexDataMapPair_descriptor_ = IndexDataMapTable_descriptor_->nested_type(0);
  static const int IndexDataMapTable_IndexDataMapPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexDataMapTable_IndexDataMapPair, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexDataMapTable_IndexDataMapPair, offset_),
  };
  IndexDataMapTable_IndexDataMapPair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IndexDataMapTable_IndexDataMapPair_descriptor_,
      IndexDataMapTable_IndexDataMapPair::default_instance_,
      IndexDataMapTable_IndexDataMapPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexDataMapTable_IndexDataMapPair, _has_bits_[0]),
      -1,
      -1,
      sizeof(IndexDataMapTable_IndexDataMapPair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexDataMapTable_IndexDataMapPair, _internal_metadata_),
      -1);
  ModeTable_descriptor_ = file->message_type(2);
  static const int ModeTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeTable, codeindexmappair_),
  };
  ModeTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModeTable_descriptor_,
      ModeTable::default_instance_,
      ModeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeTable, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModeTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeTable, _internal_metadata_),
      -1);
  ModeTable_CodeIndexMapPair_descriptor_ = ModeTable_descriptor_->nested_type(0);
  static const int ModeTable_CodeIndexMapPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeTable_CodeIndexMapPair, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeTable_CodeIndexMapPair, indexlist_),
  };
  ModeTable_CodeIndexMapPair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModeTable_CodeIndexMapPair_descriptor_,
      ModeTable_CodeIndexMapPair::default_instance_,
      ModeTable_CodeIndexMapPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeTable_CodeIndexMapPair, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModeTable_CodeIndexMapPair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeTable_CodeIndexMapPair, _internal_metadata_),
      -1);
  Node_descriptor_ = file->message_type(3);
  static const int Node_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, startcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, endcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, previous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, defaultcode_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      -1);
  NodeTree_descriptor_ = file->message_type(4);
  static const int NodeTree_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeTree, treenode_),
  };
  NodeTree_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeTree_descriptor_,
      NodeTree::default_instance_,
      NodeTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeTree, _has_bits_[0]),
      -1,
      -1,
      sizeof(NodeTree),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeTree, _internal_metadata_),
      -1);
  book_descriptor_ = file->message_type(5);
  static const int book_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(book, nodetree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(book, modetabellist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(book, curmode_),
  };
  book_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      book_descriptor_,
      book::default_instance_,
      book_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(book, _has_bits_[0]),
      -1,
      -1,
      sizeof(book),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(book, _internal_metadata_),
      -1);
  book_ModeType_descriptor_ = book_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_book_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BasicDataTable_descriptor_, &BasicDataTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IndexDataMapTable_descriptor_, &IndexDataMapTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IndexDataMapTable_IndexDataMapPair_descriptor_, &IndexDataMapTable_IndexDataMapPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModeTable_descriptor_, &ModeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModeTable_CodeIndexMapPair_descriptor_, &ModeTable_CodeIndexMapPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeTree_descriptor_, &NodeTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      book_descriptor_, &book::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_book_2eproto() {
  delete BasicDataTable::default_instance_;
  delete BasicDataTable_reflection_;
  delete IndexDataMapTable::default_instance_;
  delete IndexDataMapTable_reflection_;
  delete IndexDataMapTable_IndexDataMapPair::default_instance_;
  delete IndexDataMapTable_IndexDataMapPair_reflection_;
  delete ModeTable::default_instance_;
  delete ModeTable_reflection_;
  delete ModeTable_CodeIndexMapPair::default_instance_;
  delete ModeTable_CodeIndexMapPair_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete NodeTree::default_instance_;
  delete NodeTree_reflection_;
  delete book::default_instance_;
  delete book_reflection_;
}

void protobuf_AddDesc_book_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbook.proto\022\004book\"#\n\016BasicDataTable\022\021\n\t"
    "audioData\030\001 \003(\014\"\212\001\n\021IndexDataMapTable\022B\n"
    "\020indexDataMapPair\030\001 \002(\0132(.book.IndexData"
    "MapTable.IndexDataMapPair\0321\n\020IndexDataMa"
    "pPair\022\r\n\005index\030\001 \002(\005\022\016\n\006offset\030\002 \002(\005\"|\n\t"
    "ModeTable\022:\n\020codeIndexMapPair\030\001 \003(\0132 .bo"
    "ok.ModeTable.CodeIndexMapPair\0323\n\020CodeInd"
    "exMapPair\022\014\n\004code\030\001 \002(\005\022\021\n\tindexList\030\002 \003"
    "(\005\"_\n\004Node\022\021\n\tstartCode\030\001 \002(\005\022\017\n\007endCode"
    "\030\002 \002(\005\022\020\n\010previous\030\003 \002(\005\022\014\n\004next\030\004 \003(\005\022\023"
    "\n\013defaultCode\030\005 \003(\005\"(\n\010NodeTree\022\034\n\010treeN"
    "ode\030\001 \003(\0132\n.book.Node\"\251\001\n\004book\022 \n\010nodeTr"
    "ee\030\001 \002(\0132\016.book.NodeTree\022&\n\rmodeTabelLis"
    "t\030\002 \003(\0132\017.book.ModeTable\022+\n\007curMode\030\003 \002("
    "\0162\023.book.book.ModeType:\005STUDY\"*\n\010ModeTyp"
    "e\022\010\n\004GAME\020\000\022\t\n\005STUDY\020\001\022\t\n\005STORY\020\002", 633);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "book.proto", &protobuf_RegisterTypes);
  BasicDataTable::default_instance_ = new BasicDataTable();
  IndexDataMapTable::default_instance_ = new IndexDataMapTable();
  IndexDataMapTable_IndexDataMapPair::default_instance_ = new IndexDataMapTable_IndexDataMapPair();
  ModeTable::default_instance_ = new ModeTable();
  ModeTable_CodeIndexMapPair::default_instance_ = new ModeTable_CodeIndexMapPair();
  Node::default_instance_ = new Node();
  NodeTree::default_instance_ = new NodeTree();
  book::default_instance_ = new book();
  BasicDataTable::default_instance_->InitAsDefaultInstance();
  IndexDataMapTable::default_instance_->InitAsDefaultInstance();
  IndexDataMapTable_IndexDataMapPair::default_instance_->InitAsDefaultInstance();
  ModeTable::default_instance_->InitAsDefaultInstance();
  ModeTable_CodeIndexMapPair::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  NodeTree::default_instance_->InitAsDefaultInstance();
  book::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_book_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_book_2eproto {
  StaticDescriptorInitializer_book_2eproto() {
    protobuf_AddDesc_book_2eproto();
  }
} static_descriptor_initializer_book_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int BasicDataTable::kAudioDataFieldNumber;
#endif  // !_MSC_VER

BasicDataTable::BasicDataTable()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:book.BasicDataTable)
}

void BasicDataTable::InitAsDefaultInstance() {
}

BasicDataTable::BasicDataTable(const BasicDataTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:book.BasicDataTable)
}

void BasicDataTable::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicDataTable::~BasicDataTable() {
  // @@protoc_insertion_point(destructor:book.BasicDataTable)
  SharedDtor();
}

void BasicDataTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BasicDataTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicDataTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicDataTable_descriptor_;
}

const BasicDataTable& BasicDataTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_book_2eproto();
  return *default_instance_;
}

BasicDataTable* BasicDataTable::default_instance_ = NULL;

BasicDataTable* BasicDataTable::New(::google::protobuf::Arena* arena) const {
  BasicDataTable* n = new BasicDataTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasicDataTable::Clear() {
  audiodata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BasicDataTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:book.BasicDataTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes audioData = 1;
      case 1: {
        if (tag == 10) {
         parse_audioData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_audiodata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_audioData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:book.BasicDataTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:book.BasicDataTable)
  return false;
#undef DO_
}

void BasicDataTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:book.BasicDataTable)
  // repeated bytes audioData = 1;
  for (int i = 0; i < this->audiodata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->audiodata(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:book.BasicDataTable)
}

::google::protobuf::uint8* BasicDataTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:book.BasicDataTable)
  // repeated bytes audioData = 1;
  for (int i = 0; i < this->audiodata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->audiodata(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:book.BasicDataTable)
  return target;
}

int BasicDataTable::ByteSize() const {
  int total_size = 0;

  // repeated bytes audioData = 1;
  total_size += 1 * this->audiodata_size();
  for (int i = 0; i < this->audiodata_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->audiodata(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicDataTable::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BasicDataTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BasicDataTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasicDataTable::MergeFrom(const BasicDataTable& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  audiodata_.MergeFrom(from.audiodata_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BasicDataTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicDataTable::CopyFrom(const BasicDataTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicDataTable::IsInitialized() const {

  return true;
}

void BasicDataTable::Swap(BasicDataTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicDataTable::InternalSwap(BasicDataTable* other) {
  audiodata_.UnsafeArenaSwap(&other->audiodata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasicDataTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicDataTable_descriptor_;
  metadata.reflection = BasicDataTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndexDataMapTable_IndexDataMapPair::kIndexFieldNumber;
const int IndexDataMapTable_IndexDataMapPair::kOffsetFieldNumber;
#endif  // !_MSC_VER

IndexDataMapTable_IndexDataMapPair::IndexDataMapTable_IndexDataMapPair()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:book.IndexDataMapTable.IndexDataMapPair)
}

void IndexDataMapTable_IndexDataMapPair::InitAsDefaultInstance() {
}

IndexDataMapTable_IndexDataMapPair::IndexDataMapTable_IndexDataMapPair(const IndexDataMapTable_IndexDataMapPair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:book.IndexDataMapTable.IndexDataMapPair)
}

void IndexDataMapTable_IndexDataMapPair::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexDataMapTable_IndexDataMapPair::~IndexDataMapTable_IndexDataMapPair() {
  // @@protoc_insertion_point(destructor:book.IndexDataMapTable.IndexDataMapPair)
  SharedDtor();
}

void IndexDataMapTable_IndexDataMapPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexDataMapTable_IndexDataMapPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexDataMapTable_IndexDataMapPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexDataMapTable_IndexDataMapPair_descriptor_;
}

const IndexDataMapTable_IndexDataMapPair& IndexDataMapTable_IndexDataMapPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_book_2eproto();
  return *default_instance_;
}

IndexDataMapTable_IndexDataMapPair* IndexDataMapTable_IndexDataMapPair::default_instance_ = NULL;

IndexDataMapTable_IndexDataMapPair* IndexDataMapTable_IndexDataMapPair::New(::google::protobuf::Arena* arena) const {
  IndexDataMapTable_IndexDataMapPair* n = new IndexDataMapTable_IndexDataMapPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexDataMapTable_IndexDataMapPair::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IndexDataMapTable_IndexDataMapPair*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, offset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IndexDataMapTable_IndexDataMapPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:book.IndexDataMapTable.IndexDataMapPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required int32 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:book.IndexDataMapTable.IndexDataMapPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:book.IndexDataMapTable.IndexDataMapPair)
  return false;
#undef DO_
}

void IndexDataMapTable_IndexDataMapPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:book.IndexDataMapTable.IndexDataMapPair)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:book.IndexDataMapTable.IndexDataMapPair)
}

::google::protobuf::uint8* IndexDataMapTable_IndexDataMapPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:book.IndexDataMapTable.IndexDataMapPair)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:book.IndexDataMapTable.IndexDataMapPair)
  return target;
}

int IndexDataMapTable_IndexDataMapPair::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_index()) {
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_offset()) {
    // required int32 offset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset());
  }

  return total_size;
}
int IndexDataMapTable_IndexDataMapPair::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required int32 offset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexDataMapTable_IndexDataMapPair::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IndexDataMapTable_IndexDataMapPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexDataMapTable_IndexDataMapPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexDataMapTable_IndexDataMapPair::MergeFrom(const IndexDataMapTable_IndexDataMapPair& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IndexDataMapTable_IndexDataMapPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexDataMapTable_IndexDataMapPair::CopyFrom(const IndexDataMapTable_IndexDataMapPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexDataMapTable_IndexDataMapPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IndexDataMapTable_IndexDataMapPair::Swap(IndexDataMapTable_IndexDataMapPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexDataMapTable_IndexDataMapPair::InternalSwap(IndexDataMapTable_IndexDataMapPair* other) {
  std::swap(index_, other->index_);
  std::swap(offset_, other->offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexDataMapTable_IndexDataMapPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexDataMapTable_IndexDataMapPair_descriptor_;
  metadata.reflection = IndexDataMapTable_IndexDataMapPair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int IndexDataMapTable::kIndexDataMapPairFieldNumber;
#endif  // !_MSC_VER

IndexDataMapTable::IndexDataMapTable()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:book.IndexDataMapTable)
}

void IndexDataMapTable::InitAsDefaultInstance() {
  indexdatamappair_ = const_cast< ::book::IndexDataMapTable_IndexDataMapPair*>(&::book::IndexDataMapTable_IndexDataMapPair::default_instance());
}

IndexDataMapTable::IndexDataMapTable(const IndexDataMapTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:book.IndexDataMapTable)
}

void IndexDataMapTable::SharedCtor() {
  _cached_size_ = 0;
  indexdatamappair_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexDataMapTable::~IndexDataMapTable() {
  // @@protoc_insertion_point(destructor:book.IndexDataMapTable)
  SharedDtor();
}

void IndexDataMapTable::SharedDtor() {
  if (this != default_instance_) {
    delete indexdatamappair_;
  }
}

void IndexDataMapTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexDataMapTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexDataMapTable_descriptor_;
}

const IndexDataMapTable& IndexDataMapTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_book_2eproto();
  return *default_instance_;
}

IndexDataMapTable* IndexDataMapTable::default_instance_ = NULL;

IndexDataMapTable* IndexDataMapTable::New(::google::protobuf::Arena* arena) const {
  IndexDataMapTable* n = new IndexDataMapTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndexDataMapTable::Clear() {
  if (has_indexdatamappair()) {
    if (indexdatamappair_ != NULL) indexdatamappair_->::book::IndexDataMapTable_IndexDataMapPair::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IndexDataMapTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:book.IndexDataMapTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .book.IndexDataMapTable.IndexDataMapPair indexDataMapPair = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexdatamappair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:book.IndexDataMapTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:book.IndexDataMapTable)
  return false;
#undef DO_
}

void IndexDataMapTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:book.IndexDataMapTable)
  // required .book.IndexDataMapTable.IndexDataMapPair indexDataMapPair = 1;
  if (has_indexdatamappair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->indexdatamappair_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:book.IndexDataMapTable)
}

::google::protobuf::uint8* IndexDataMapTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:book.IndexDataMapTable)
  // required .book.IndexDataMapTable.IndexDataMapPair indexDataMapPair = 1;
  if (has_indexdatamappair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->indexdatamappair_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:book.IndexDataMapTable)
  return target;
}

int IndexDataMapTable::ByteSize() const {
  int total_size = 0;

  // required .book.IndexDataMapTable.IndexDataMapPair indexDataMapPair = 1;
  if (has_indexdatamappair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->indexdatamappair_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexDataMapTable::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IndexDataMapTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexDataMapTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexDataMapTable::MergeFrom(const IndexDataMapTable& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_indexdatamappair()) {
      mutable_indexdatamappair()->::book::IndexDataMapTable_IndexDataMapPair::MergeFrom(from.indexdatamappair());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IndexDataMapTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexDataMapTable::CopyFrom(const IndexDataMapTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexDataMapTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_indexdatamappair()) {
    if (!this->indexdatamappair_->IsInitialized()) return false;
  }
  return true;
}

void IndexDataMapTable::Swap(IndexDataMapTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexDataMapTable::InternalSwap(IndexDataMapTable* other) {
  std::swap(indexdatamappair_, other->indexdatamappair_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndexDataMapTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexDataMapTable_descriptor_;
  metadata.reflection = IndexDataMapTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModeTable_CodeIndexMapPair::kCodeFieldNumber;
const int ModeTable_CodeIndexMapPair::kIndexListFieldNumber;
#endif  // !_MSC_VER

ModeTable_CodeIndexMapPair::ModeTable_CodeIndexMapPair()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:book.ModeTable.CodeIndexMapPair)
}

void ModeTable_CodeIndexMapPair::InitAsDefaultInstance() {
}

ModeTable_CodeIndexMapPair::ModeTable_CodeIndexMapPair(const ModeTable_CodeIndexMapPair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:book.ModeTable.CodeIndexMapPair)
}

void ModeTable_CodeIndexMapPair::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModeTable_CodeIndexMapPair::~ModeTable_CodeIndexMapPair() {
  // @@protoc_insertion_point(destructor:book.ModeTable.CodeIndexMapPair)
  SharedDtor();
}

void ModeTable_CodeIndexMapPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModeTable_CodeIndexMapPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModeTable_CodeIndexMapPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModeTable_CodeIndexMapPair_descriptor_;
}

const ModeTable_CodeIndexMapPair& ModeTable_CodeIndexMapPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_book_2eproto();
  return *default_instance_;
}

ModeTable_CodeIndexMapPair* ModeTable_CodeIndexMapPair::default_instance_ = NULL;

ModeTable_CodeIndexMapPair* ModeTable_CodeIndexMapPair::New(::google::protobuf::Arena* arena) const {
  ModeTable_CodeIndexMapPair* n = new ModeTable_CodeIndexMapPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModeTable_CodeIndexMapPair::Clear() {
  code_ = 0;
  indexlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModeTable_CodeIndexMapPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:book.ModeTable.CodeIndexMapPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_indexList;
        break;
      }

      // repeated int32 indexList = 2;
      case 2: {
        if (tag == 16) {
         parse_indexList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_indexlist())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indexlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_indexList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:book.ModeTable.CodeIndexMapPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:book.ModeTable.CodeIndexMapPair)
  return false;
#undef DO_
}

void ModeTable_CodeIndexMapPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:book.ModeTable.CodeIndexMapPair)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated int32 indexList = 2;
  for (int i = 0; i < this->indexlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->indexlist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:book.ModeTable.CodeIndexMapPair)
}

::google::protobuf::uint8* ModeTable_CodeIndexMapPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:book.ModeTable.CodeIndexMapPair)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated int32 indexList = 2;
  for (int i = 0; i < this->indexlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->indexlist(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:book.ModeTable.CodeIndexMapPair)
  return target;
}

int ModeTable_CodeIndexMapPair::ByteSize() const {
  int total_size = 0;

  // required int32 code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }
  // repeated int32 indexList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->indexlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->indexlist(i));
    }
    total_size += 1 * this->indexlist_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModeTable_CodeIndexMapPair::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModeTable_CodeIndexMapPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModeTable_CodeIndexMapPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModeTable_CodeIndexMapPair::MergeFrom(const ModeTable_CodeIndexMapPair& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  indexlist_.MergeFrom(from.indexlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModeTable_CodeIndexMapPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModeTable_CodeIndexMapPair::CopyFrom(const ModeTable_CodeIndexMapPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeTable_CodeIndexMapPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ModeTable_CodeIndexMapPair::Swap(ModeTable_CodeIndexMapPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModeTable_CodeIndexMapPair::InternalSwap(ModeTable_CodeIndexMapPair* other) {
  std::swap(code_, other->code_);
  indexlist_.UnsafeArenaSwap(&other->indexlist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModeTable_CodeIndexMapPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModeTable_CodeIndexMapPair_descriptor_;
  metadata.reflection = ModeTable_CodeIndexMapPair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ModeTable::kCodeIndexMapPairFieldNumber;
#endif  // !_MSC_VER

ModeTable::ModeTable()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:book.ModeTable)
}

void ModeTable::InitAsDefaultInstance() {
}

ModeTable::ModeTable(const ModeTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:book.ModeTable)
}

void ModeTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModeTable::~ModeTable() {
  // @@protoc_insertion_point(destructor:book.ModeTable)
  SharedDtor();
}

void ModeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModeTable_descriptor_;
}

const ModeTable& ModeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_book_2eproto();
  return *default_instance_;
}

ModeTable* ModeTable::default_instance_ = NULL;

ModeTable* ModeTable::New(::google::protobuf::Arena* arena) const {
  ModeTable* n = new ModeTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModeTable::Clear() {
  codeindexmappair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:book.ModeTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .book.ModeTable.CodeIndexMapPair codeIndexMapPair = 1;
      case 1: {
        if (tag == 10) {
         parse_codeIndexMapPair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_codeindexmappair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_codeIndexMapPair;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:book.ModeTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:book.ModeTable)
  return false;
#undef DO_
}

void ModeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:book.ModeTable)
  // repeated .book.ModeTable.CodeIndexMapPair codeIndexMapPair = 1;
  for (unsigned int i = 0, n = this->codeindexmappair_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->codeindexmappair(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:book.ModeTable)
}

::google::protobuf::uint8* ModeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:book.ModeTable)
  // repeated .book.ModeTable.CodeIndexMapPair codeIndexMapPair = 1;
  for (unsigned int i = 0, n = this->codeindexmappair_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->codeindexmappair(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:book.ModeTable)
  return target;
}

int ModeTable::ByteSize() const {
  int total_size = 0;

  // repeated .book.ModeTable.CodeIndexMapPair codeIndexMapPair = 1;
  total_size += 1 * this->codeindexmappair_size();
  for (int i = 0; i < this->codeindexmappair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->codeindexmappair(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModeTable::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModeTable::MergeFrom(const ModeTable& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  codeindexmappair_.MergeFrom(from.codeindexmappair_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModeTable::CopyFrom(const ModeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeTable::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->codeindexmappair())) return false;
  return true;
}

void ModeTable::Swap(ModeTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModeTable::InternalSwap(ModeTable* other) {
  codeindexmappair_.UnsafeArenaSwap(&other->codeindexmappair_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModeTable_descriptor_;
  metadata.reflection = ModeTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Node::kStartCodeFieldNumber;
const int Node::kEndCodeFieldNumber;
const int Node::kPreviousFieldNumber;
const int Node::kNextFieldNumber;
const int Node::kDefaultCodeFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:book.Node)
}

void Node::InitAsDefaultInstance() {
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:book.Node)
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  startcode_ = 0;
  endcode_ = 0;
  previous_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:book.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_book_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Node*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(startcode_, endcode_);
    previous_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  next_.Clear();
  defaultcode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:book.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 startCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startcode_)));
          set_has_startcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endCode;
        break;
      }

      // required int32 endCode = 2;
      case 2: {
        if (tag == 16) {
         parse_endCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endcode_)));
          set_has_endcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_previous;
        break;
      }

      // required int32 previous = 3;
      case 3: {
        if (tag == 24) {
         parse_previous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &previous_)));
          set_has_previous();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_next;
        break;
      }

      // repeated int32 next = 4;
      case 4: {
        if (tag == 32) {
         parse_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_next())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_next())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_next;
        if (input->ExpectTag(40)) goto parse_defaultCode;
        break;
      }

      // repeated int32 defaultCode = 5;
      case 5: {
        if (tag == 40) {
         parse_defaultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_defaultcode())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_defaultcode())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_defaultCode;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:book.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:book.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:book.Node)
  // required int32 startCode = 1;
  if (has_startcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->startcode(), output);
  }

  // required int32 endCode = 2;
  if (has_endcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endcode(), output);
  }

  // required int32 previous = 3;
  if (has_previous()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->previous(), output);
  }

  // repeated int32 next = 4;
  for (int i = 0; i < this->next_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->next(i), output);
  }

  // repeated int32 defaultCode = 5;
  for (int i = 0; i < this->defaultcode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->defaultcode(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:book.Node)
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:book.Node)
  // required int32 startCode = 1;
  if (has_startcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->startcode(), target);
  }

  // required int32 endCode = 2;
  if (has_endcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endcode(), target);
  }

  // required int32 previous = 3;
  if (has_previous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->previous(), target);
  }

  // repeated int32 next = 4;
  for (int i = 0; i < this->next_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->next(i), target);
  }

  // repeated int32 defaultCode = 5;
  for (int i = 0; i < this->defaultcode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->defaultcode(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:book.Node)
  return target;
}

int Node::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_startcode()) {
    // required int32 startCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startcode());
  }

  if (has_endcode()) {
    // required int32 endCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endcode());
  }

  if (has_previous()) {
    // required int32 previous = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->previous());
  }

  return total_size;
}
int Node::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 startCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startcode());

    // required int32 endCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endcode());

    // required int32 previous = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->previous());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 next = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->next_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->next(i));
    }
    total_size += 1 * this->next_size() + data_size;
  }

  // repeated int32 defaultCode = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->defaultcode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->defaultcode(i));
    }
    total_size += 1 * this->defaultcode_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  next_.MergeFrom(from.next_);
  defaultcode_.MergeFrom(from.defaultcode_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startcode()) {
      set_startcode(from.startcode());
    }
    if (from.has_endcode()) {
      set_endcode(from.endcode());
    }
    if (from.has_previous()) {
      set_previous(from.previous());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  std::swap(startcode_, other->startcode_);
  std::swap(endcode_, other->endcode_);
  std::swap(previous_, other->previous_);
  next_.UnsafeArenaSwap(&other->next_);
  defaultcode_.UnsafeArenaSwap(&other->defaultcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeTree::kTreeNodeFieldNumber;
#endif  // !_MSC_VER

NodeTree::NodeTree()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:book.NodeTree)
}

void NodeTree::InitAsDefaultInstance() {
}

NodeTree::NodeTree(const NodeTree& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:book.NodeTree)
}

void NodeTree::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeTree::~NodeTree() {
  // @@protoc_insertion_point(destructor:book.NodeTree)
  SharedDtor();
}

void NodeTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeTree_descriptor_;
}

const NodeTree& NodeTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_book_2eproto();
  return *default_instance_;
}

NodeTree* NodeTree::default_instance_ = NULL;

NodeTree* NodeTree::New(::google::protobuf::Arena* arena) const {
  NodeTree* n = new NodeTree;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeTree::Clear() {
  treenode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:book.NodeTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .book.Node treeNode = 1;
      case 1: {
        if (tag == 10) {
         parse_treeNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treenode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_treeNode;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:book.NodeTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:book.NodeTree)
  return false;
#undef DO_
}

void NodeTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:book.NodeTree)
  // repeated .book.Node treeNode = 1;
  for (unsigned int i = 0, n = this->treenode_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treenode(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:book.NodeTree)
}

::google::protobuf::uint8* NodeTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:book.NodeTree)
  // repeated .book.Node treeNode = 1;
  for (unsigned int i = 0, n = this->treenode_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treenode(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:book.NodeTree)
  return target;
}

int NodeTree::ByteSize() const {
  int total_size = 0;

  // repeated .book.Node treeNode = 1;
  total_size += 1 * this->treenode_size();
  for (int i = 0; i < this->treenode_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treenode(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeTree::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeTree::MergeFrom(const NodeTree& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  treenode_.MergeFrom(from.treenode_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NodeTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeTree::CopyFrom(const NodeTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeTree::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->treenode())) return false;
  return true;
}

void NodeTree::Swap(NodeTree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeTree::InternalSwap(NodeTree* other) {
  treenode_.UnsafeArenaSwap(&other->treenode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeTree_descriptor_;
  metadata.reflection = NodeTree_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* book_ModeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return book_ModeType_descriptor_;
}
bool book_ModeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const book_ModeType book::GAME;
const book_ModeType book::STUDY;
const book_ModeType book::STORY;
const book_ModeType book::ModeType_MIN;
const book_ModeType book::ModeType_MAX;
const int book::ModeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int book::kNodeTreeFieldNumber;
const int book::kModeTabelListFieldNumber;
const int book::kCurModeFieldNumber;
#endif  // !_MSC_VER

book::book()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:book.book)
}

void book::InitAsDefaultInstance() {
  nodetree_ = const_cast< ::book::NodeTree*>(&::book::NodeTree::default_instance());
}

book::book(const book& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:book.book)
}

void book::SharedCtor() {
  _cached_size_ = 0;
  nodetree_ = NULL;
  curmode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

book::~book() {
  // @@protoc_insertion_point(destructor:book.book)
  SharedDtor();
}

void book::SharedDtor() {
  if (this != default_instance_) {
    delete nodetree_;
  }
}

void book::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* book::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return book_descriptor_;
}

const book& book::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_book_2eproto();
  return *default_instance_;
}

book* book::default_instance_ = NULL;

book* book::New(::google::protobuf::Arena* arena) const {
  book* n = new book;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void book::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_nodetree()) {
      if (nodetree_ != NULL) nodetree_->::book::NodeTree::Clear();
    }
    curmode_ = 1;
  }
  modetabellist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool book::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:book.book)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .book.NodeTree nodeTree = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodetree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_modeTabelList;
        break;
      }

      // repeated .book.ModeTable modeTabelList = 2;
      case 2: {
        if (tag == 18) {
         parse_modeTabelList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modetabellist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_modeTabelList;
        if (input->ExpectTag(24)) goto parse_curMode;
        break;
      }

      // required .book.book.ModeType curMode = 3 [default = STUDY];
      case 3: {
        if (tag == 24) {
         parse_curMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::book::book_ModeType_IsValid(value)) {
            set_curmode(static_cast< ::book::book_ModeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:book.book)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:book.book)
  return false;
#undef DO_
}

void book::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:book.book)
  // required .book.NodeTree nodeTree = 1;
  if (has_nodetree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->nodetree_, output);
  }

  // repeated .book.ModeTable modeTabelList = 2;
  for (unsigned int i = 0, n = this->modetabellist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->modetabellist(i), output);
  }

  // required .book.book.ModeType curMode = 3 [default = STUDY];
  if (has_curmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->curmode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:book.book)
}

::google::protobuf::uint8* book::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:book.book)
  // required .book.NodeTree nodeTree = 1;
  if (has_nodetree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->nodetree_, target);
  }

  // repeated .book.ModeTable modeTabelList = 2;
  for (unsigned int i = 0, n = this->modetabellist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->modetabellist(i), target);
  }

  // required .book.book.ModeType curMode = 3 [default = STUDY];
  if (has_curmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->curmode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:book.book)
  return target;
}

int book::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_nodetree()) {
    // required .book.NodeTree nodeTree = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nodetree_);
  }

  if (has_curmode()) {
    // required .book.book.ModeType curMode = 3 [default = STUDY];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->curmode());
  }

  return total_size;
}
int book::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .book.NodeTree nodeTree = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nodetree_);

    // required .book.book.ModeType curMode = 3 [default = STUDY];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->curmode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .book.ModeTable modeTabelList = 2;
  total_size += 1 * this->modetabellist_size();
  for (int i = 0; i < this->modetabellist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->modetabellist(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void book::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const book* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const book*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void book::MergeFrom(const book& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  modetabellist_.MergeFrom(from.modetabellist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodetree()) {
      mutable_nodetree()->::book::NodeTree::MergeFrom(from.nodetree());
    }
    if (from.has_curmode()) {
      set_curmode(from.curmode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void book::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void book::CopyFrom(const book& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool book::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_nodetree()) {
    if (!this->nodetree_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->modetabellist())) return false;
  return true;
}

void book::Swap(book* other) {
  if (other == this) return;
  InternalSwap(other);
}
void book::InternalSwap(book* other) {
  std::swap(nodetree_, other->nodetree_);
  modetabellist_.UnsafeArenaSwap(&other->modetabellist_);
  std::swap(curmode_, other->curmode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata book::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = book_descriptor_;
  metadata.reflection = book_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace book

// @@protoc_insertion_point(global_scope)
